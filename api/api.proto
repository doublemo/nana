// Copyright (c) 2022 The Linna Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package linna.api;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doublemo/nana/api";


message Account {
    // The user object.
  User user = 1;
  // The user's wallet data.
  string wallet = 2;
  // The email address of the user.
  string email = 3;
  // The devices which belong to the user's account.
  repeated AccountDevice devices = 4;
  // The custom id in the user's account.
  string custom_id = 5;
  // The UNIX time when the user's email was verified.
  google.protobuf.Timestamp verify_time = 6;
  // The UNIX time when the user's account was disabled/banned.
  google.protobuf.Timestamp disable_time = 7;
}

// Send a device to the server. Used with authenticate/link/unlink and user.
message AccountDevice {
    // A device identifier. Should be obtained by a platform-specific device API.
    string id = 1;
    // Extra information that will be bundled in the session token.
    map<string, string> vars = 2;
}

// Authenticate against the server with a refresh token.
message SessionRefreshRequest {
  // Refresh token.
  string token = 1;
  // Extra information that will be bundled in the session token.
  map<string, string> vars = 2;
}


// Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.
message SessionLogoutRequest {
  // Session token to log out.
  string token = 1;
  // Refresh token to invalidate.
  string refresh_token = 2
  ;
}

// Execute an Lua function on the server.
message Rpc {
  // The identifier of the function.
  string id = 1;
  // The payload of the function which must be a JSON object.
  string payload = 2;
  // The authentication key used when executed as a non-client HTTP request.
  string http_key = 3;
}

// A user's session used to authenticate messages.
message Session {
  // True if the corresponding account was just created, false otherwise.
  bool created = 1;
  // Authentication credentials.
  string token = 2;
  // Refresh token that can be used for session token renewal.
  string refresh_token = 3;
}


// A user in the server.
message User {
    // The id of the user's account.
    string id = 1;
    // The username of the user's account.
    string username = 2;
    // The display name of the user.
    string display_name = 3;
    // A URL for an avatar image.
    string avatar_url = 4;
    // The language expected to be a tag which follows the BCP-47 spec.
    string lang_tag = 5;
    // The location set by the user.
    string location = 6;
    // The timezone set by the user.
    string timezone = 7;
    // Additional information stored as a JSON object.
    string metadata = 8;
    // The Facebook id in the user's account.
    string facebook_id = 9;
    // The Google id in the user's account.
    string google_id = 10;
    // The Apple Game Center in of the user's account.
    string gamecenter_id = 11;
    // The Steam id in the user's account.
    string steam_id = 12;
    // Indicates whether the user is currently online.
    bool online = 13;
    // Number of related edges to this user.
    int32 edge_count = 14;
    // The UNIX time when the user was created.
    google.protobuf.Timestamp create_time = 15;
    // The UNIX time when the user was last updated.
    google.protobuf.Timestamp update_time = 16;
    // The Facebook Instant Game ID in the user's account.
    string facebook_instant_game_id = 17;
    // The Apple Sign In ID in the user's account.
    string apple_id = 18;
  }